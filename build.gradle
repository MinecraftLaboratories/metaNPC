buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "maven"
			url = "https://repo1.maven.org/maven2"
		}
		maven {
			name = "github"
			url = "https://github.com/juanmuscaria/maven/raw/master"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
			changing = true
		}
		classpath 'com.integral.grimoire:GrimoireShenanigans:[1.5.3,)'
		classpath "tech.justagod:cutter:2.1.0-SNAPSHOT"
		classpath 'net.ltgt.gradle:gradle-apt-plugin:0.9'
	}
}

plugins {
	id "io.freefair.lombok" version "4.1.4"
	id "java"
}

apply plugin: 'forge'
apply plugin: 'grimoire-shenanigans'
apply plugin: 'cutter'

repositories {
	flatDir {
		dirs 'libs'
	}
	mavenCentral()
}

cutter.initializeDefault()
cutter.withoutDefaultLib = true
cutter.removeAnnotations = true
cutter.validation = false

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

version = mod_version
group = mod_group
archivesBaseName = mod_archives_name

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "eclipse"
	replace "@VERSION@", project.version
	replace "@MOD_ID@", project.mod_id
	replace "@MOD_NAME@", project.mod_name
	replace "@MOD_GROUP@", project.mod_group
}

test {
	useJUnitPlatform()
}

processResources {

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version,
				'mod_id': mod_id,
				'mod_name': mod_name,
				'mod_author': mod_author,
				'mod_description': mod_description,
				'mc_version': mc_version,
				'mod_version': mod_version,
				'mod_icon': mod_icon
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task devJar(type: Jar) {
	from { configurations.toJar.collect { it.isDirectory() ? it : zipTree(it) } }
	classifier = 'dev'
	from sourceSets.main.output
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives devJar
	archives sourcesJar
}

configurations {
	toJar
}

if (project.hasProperty('build')) {
	assemble.finalizedBy buildAll
}

jar {
	from { configurations.toJar.collect { it.isDirectory() ? it : zipTree(it) } }

	manifest {
		attributes 'FMLAT': project.mod_id+'_at.cfg'
		attributes 'FMLCorePlugin': project.mod_group + '.client.HookLoaderMod'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}

	include 'META-INF/'+project.mod_id+'_at.cfg'

	include '**/*'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

}

dependencies {
	compile fileTree("libs")

	implementation 'org.jetbrains:annotations:23.0.0'

	implementation 'org.junit.jupiter:junit-jupiter:5.9.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

	annotationProcessor 'org.projectlombok:lombok:1.18.24', "io.gitlab.hohserg.elegant.networking:annotation-processor:3.14"
}

lombok {
	version = '1.18.24'
}
